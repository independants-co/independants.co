// -----------------------------------------------------------------------------
// This file contains CSS helper classes.
// -----------------------------------------------------------------------------

/**
 * Clear inner floats
 */
.clearfix::after {
  clear: both;
  content: '';
  display: table;
}

/**
 * Floats
 */
.float-l {
  float: left;
}
.float-r {
  float: right;
}

/**
 * Hide text while making it readable for screen readers
 * 1. Needed in WebKit-based browsers because of an implementation bug;
 *    See: https://code.google.com/p/chromium/issues/detail?id=457146
 */
.hide-text {
  overflow: hidden;
  padding: 0; /* 1 */
  text-indent: 101%;
  white-space: nowrap;
}

/**
 * Hide element while making it readable for screen readers
 * Shamelessly borrowed from HTML5Boilerplate:
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css#L119-L133
 */
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}

/**
 * Hide / Show elements
 */
@media (min-width: 0px) {
  .hidden,
  .show-xs, .show-sm, .show-md, .show-lg {
    display: none;
  }
  .show {
    display: initial;
  }
}
@media (min-width: $breakpoint-xs) {
  .hidden-xs {
    display: none;
  }
  .show-xs {
    display: initial;
  }
}
@media (min-width: $breakpoint-sm) {
  .hidden-sm {
    display: none;
  }
  .show-sm {
    display: initial;
  }
}
@media (min-width: $breakpoint-md) {
  .hidden-md {
    display: none;
  }
  .show-md {
    display: initial;
  }
}

@media (min-width: $breakpoint-lg) {
  .hidden-lg {
    display: none;
  }
  .show-lg {
    display: initial;
  }
}

/**
 * Borders
 */
.bb-2 {
  border-bottom: 2px solid var(--primary-100);
}
.bb-1 {
  border-bottom: 1px solid var(--primary-40);
}
.bt-2 {
  border-top: 2px solid var(--primary-100);
}
.bt-1 {
  border-top: 1px solid var(--primary-40);
}

/**
 * Width & Height
 */
.w-100    { width: 100%; }
.w-100vw  { width: 100vw; }
.min-w-100vw { min-width: 100vw; }
.max-w-100vw { max-width: 100vw; }

.text-max-w > * { max-width: $text-max-width; }

.h-100    { height: 100%; }
.h-100vh  { 
  height: 100vh; /* Fallback for browsers that do not support Custom Properties */
  height: calc(var(--vh, 1vh) * 100);
}
.min-h-100vh { 
  min-height: 100vh;
  min-height: calc(var(--vh, 1vh) * 100);
}
.max-h-100vh { 
  max-height: 100vh;
  max-height: calc(var(--vh, 1vh) * 100);
}




/**
 * Text alignements
 */
.ta-center {
  text-align: center;
}

.ta-right {
  text-align: right;
}

/**
 * Display
 */
.block {
  display: block;
}
.inline-block {
  display: inline-block;
}
.inline {
  display: inline;
}
.inline-flex {
  display: inline-flex;
}
.flex {
  @include flexbox();
}

/**
 * Flexbox
 */
.flex-row          { flex-direction: row; }
.flex-row-reverse  { flex-direction: row-reverse; }
.flex-col          { flex-direction: column; }
.flex-col-reverse  { flex-direction: column-reverse; }

.flex-wrap         { flex-wrap: wrap; }
.flex-wrap-reverse { flex-wrap: wrap-reverse; }

.justify-start   { justify-content: flex-start; }   
.justify-center  { justify-content: center; }
.justify-end     { justify-content: flex-end; }
.justify-between { justify-content: space-between; }
.justify-around  { justify-content: space-around; }

.content-start   { align-content: flex-start; }   
.content-center  { align-content: center; }
.content-end     { align-content: flex-end; }
.content-between { align-content: space-between; }
.content-around  { align-content: space-around; }

.items-stretch   { align-items: stretch; }
.items-start     { align-items: flex-start; }
.items-center    { align-items: center; }
.items-end       { align-items: flex-end; }
.items-baseline  { align-items: baseline; }

.self-auto    { align-self: auto; }
.self-start   { align-self: flex-start; }
.self-center  { align-self: center; }
.self-end     { align-self: flex-end; }
.self-stretch { align-self: stretch; }

.flex-shrink    { flex-shrink: 1; }
.flex-shrink-0  { flex-shrink: 0; }

.flex-grow    { flex-grow: 1; }
.flex-grow-0  { flex-grow: 0; }


.no-list-style {
  list-style: none;
}
.no-text-deco {
  text-decoration: none;
}

/**
 * Text-transform
 */
.uppercase { text-transform: uppercase; }
.lowercase { text-transform: lowercase; }
.capitalize { text-transform: capitalize; }

/**
 * Colors
 */
.white           { color: white; }
.grey-light      { color: var(--grey-light); }
.grey            { color: var(--grey); }
.grey-dark       { color: var(--grey-dark); }
.black           { color : black; }
.primary         { color: var(--primary); }
::-moz-selection { background-color: var(--primary); color: white; }
::selection      { background-color: var(--primary); color: white; }

.bg--primary { background-color: var(--primary); }
.bg--white  { background-color: white; }
.bg--black  { background-color: black; }


/* Invert */
.invert {
  color: white;
  background-color: var(--primary);
  ::-moz-selection { background-color: white; color: var(--primary); }
  ::selection      { background-color: white; color: var(--primary); }
  .text-container {
    a {
      color: white;
      border-bottom-color: var(--primary-dark);
    }
    &.btn {
      border-bottom-color: white;
    }
    &:hover {
      border-bottom-color: white;
    }
    &.btn:hover {
      color: var(--primary);
      border-bottom-color: white;
    }
    h3 {
      color: white;
    }
    blockquote {
      color: white;
      border-left-color: var(--primary-dark);
    }
  }
  .no-invert {
    color: initial;
    background-color: initial;
    ::-moz-selection { background-color: var(--primary); color: white; }
    ::selection      { background-color: var(--primary); color: white; }
  }
}


/**
 * Overflow
 */
.no-overflow-y {
  overflow-y: hidden;
}


/**
 * Padding & Margins
 */
.p-l-lg { padding-left:  $page-p-lg }
.p-l-sm { padding-left:  $page-p-sm }
.p-r-lg { padding-right: $page-p-lg }
.p-r-sm { padding-right: $page-p-sm }

/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
It will generate several classes such as:
.mr-0
.mr-7
.mt-6
.mx-2
.pb-4
.pl-5
.py-3
The first letter is "m" or "p" for MARGIN or PADDING
Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
or "x" / "y" for horizontal / vertical spacing
*/

$spaceamounts: ($space-0, $space-1, $space-2, $space-3, $space-4, $space-5, $space-6, $space-7, $space-8); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone
$axes: (x, y);

@each $space in $spaceamounts {
  $i: index($spaceamounts, $space) - 1; // 0, 1, 2, 3, etc.
  @each $side in $sides {
    .m#{str-slice($side, 0, 1)}-#{$i} {
      margin-#{$side}: #{$space};
    }
    .p#{str-slice($side, 0, 1)}-#{$i} {
      padding-#{$side}: #{$space};
    }
  }
  @each $axe in $axes {
    @if $axe == x {
      .m#{$axe}-#{$i} {
        margin-left: #{$space};
        margin-right: #{$space};
      }
      .p#{$axe}-#{$i} {
        padding-left: #{$space};
        padding-right: #{$space};
      }
    } @else {
      .m#{$axe}-#{$i} {
        margin-top: #{$space};
        margin-bottom: #{$space};
      }
      .p#{$axe}-#{$i} {
        padding-top: #{$space};
        padding-bottom: #{$space};
      }
    }
  }
}
